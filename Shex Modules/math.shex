-- Import with: imp ('math')

-- Lowercased functions
task add (x, y) -> x + y
task subtract (x, y) -> x - y
task multiply (x, y) -> x * y
task divide (x, y) -> x / y
task power (x, y) -> x ^ y
task sqr (x) -> `import math;;math.sqrt (int (Local['x'].Value))`
task rnd (x) -> `round (float (Local['x'].Value))`
task hypotenuse (x, y) -> sqr ((x ^ 2) + (y ^ 2))
task isodd (x)
  var res = 1

  if `int (Local['x'].Value) % 2 == 0` do
    var res = 0
  done

  res
done
task iseven (x)
  var res = 0

  if `int (Local['x'].Value) % 2 == 0` do
    var res = 1
  done

  res
done

-- Uppercased (First letter) functions
task Add (x, y) -> x + y
task Subtract (x, y) -> x - y
task Multiply (x, y) -> x * y
task Divide (x, y) -> x / y
task Power (x, y) -> x ^ y
task Sqr (x) -> `import math;;math.sqrt (int (Local['x'].Value))`
task Rnd (x) -> `round (float (Local['x'].Value))`
task Hypotenuse (x, y) -> sqr ((x ^ 2) + (y ^ 2))
task IsOdd (x)
  var res = 1

  if `int (Local['x'].Value) % 2 == 0` do
    var res = 0
  done

  res
done
task IsEven (x)
  var res = 0

  if `int (Local['x'].Value) % 2 == 0` do
    var res = 1
  done

  res
done
